# -*- coding:utf-8 -*-

# This file is part of gcovr <http://gcovr.com/>.
#
# This module manages processing and validation of the configuration options
# passed into gcovr.
#
#
# Copyright 2013-2018 the gcovr authors
# Copyright 2013 Sandia Corporation
# This software is distributed under the BSD license.
from argparse import ArgumentTypeError, SUPPRESS
from locale import getpreferredencoding
from multiprocessing import cpu_count
import os


def check_percentage(value):
    r""""
    Check that the percentage is within a reasonable range and if so return it.
    """
    try:
        x = float(value)
        if not (0.0 <= x <= 100.0):
            raise ValueError()
    except ValueError:
        raise ArgumentTypeError(
            "{value} not in range [0.0, 100.0]".format(value=value))
    return x


def check_non_empty(value):
    if not value:
        raise ArgumentTypeError("value should not be empty")
    return value


class GcovrConfigOption:
    r"""
    Represents a single setting for a gcovr runtime parameter.

    Gcovr can be extensively configured through a series of options,
    representing these options as a simple class object allows them to be
    portabilty re-used in multiple configuration schemes. This is implemented
    in a way similar to how options are defined in argparse. The converter
    keyword argument is expected to return a valid conversion of a string
    value or throw an error.

    This class is initializer in a very similar fashion as adding arguments
    to an argparse Parser instance with a few minor changes.
        1. The first positional argument is the "name" (i.e. "dest" in
           argparse speak) and is required.
        2. A "group" keyword argument has been added which corresponds to a
           key in the GCOVR_CONFIG_OPTION_GROUPS dictionary.
    """

    def __init__(self, name, *flags, **kwargs):
        self.name = name
        self.flags = flags
        self.group = kwargs.pop("group", None)
        self.default = None
        #
        # set remaining kwargs as attributes
        for key, value in kwargs.items():
            setattr(self, key, value)
        if hasattr(self, 'help'):
            self.help = self.help.format(**self.__dict__)
        #
        # the store_true and store_false actions have hardcoded boolean
        # constants in their definitions so they need switched to the generic
        # store_const in order for the logic here to work correctly.
        if getattr(self, 'action', None) == 'store_true':
            self.action = 'store_const'
            self.const = True
            self.default = False
        if getattr(self, 'action', None) == 'store_false':
            self.action = 'store_const'
            self.const = False
            self.default = True

    def __repr__(self):
        r"""String representation of instance."""
        fmt = "GcovrConfigOption({name!r}, {flags}group={group!r}, {kwargs})"
        kwargs = dict(self.__dict__)
        for key in ["name", "flags", "group"]:
            del kwargs[key]
        kwargs = ['{k}={v!r}'.format(k=k, v=v) for k, v in kwargs.items()]
        #
        return fmt.format(name=self.name,
                          flags=', '.join(self.flags) + ', ',
                          group=self.group,
                          kwargs=', '.join(kwargs))

    def add_option_to_parser(self, parser):
        r"""Adds the argument to an argparse parser or option group."""
        # extract keyword args from instance
        keys = ["action", "nargs", "const", "type", "choices",
                "required", "help", "metavar"]
        kwargs = {"default": SUPPRESS}
        for key in keys:
            if hasattr(self, key):
                kwargs[key] = getattr(self, key)

        # we only want to set dest for non-positionals
        if self.flags:
            kwargs["dest"] = self.name
            parser.add_argument(*self.flags, **kwargs)
        else:
            parser.add_argument(self.name, **kwargs)


GCOVR_CONFIG_OPTION_GROUPS = {
    "output_options": {
        "name": "Output Options",
        "description": ("Gcovr prints a text report by default, "
                        "but can switch to XML or HTML.")
    },
    "filter_options": {
        "name": "Filter Options",
        "description": ("Filters decide which files are included in the report. "
                        "Any filter must match, and no exclude filter must match. "
                        "A filter is a regular expression that matches a path. "
                        "Filter paths use forward slashes, even on Windows.")
    },
    "gcov_options": {
        "name": "GCOV Options",
        "description": ("The 'gcov' tool turns raw coverage files (.gcda and .gcno) "
                        "into .gcov files that are then processed by gcovr. "
                        "The gcno files are generated by the compiler. "
                        "The gcda files are generated when the instrumented program is "
                        "executed.")
    },
}


# Style guide for option descriptions:
# - Prefer complete sentences.
# - Phrase first sentence as a command:
#   “Print report”, not “Prints report”.
# - Must be readable on the command line,
#   AND parse as reStructured Text.

GCOVR_CONFIG_OPTIONS = [
    GcovrConfigOption(
        "verbose",
        "-v", "--verbose",
        help="Print progress messages. "
             "Please include this output in bug reports.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "root",
        "-r", "--root",
        help="The root directory of your source files. "
             "Defaults to '{default!s}', the current directory. "
             "File names are reported relative to this root. "
             "The --root is the default --filter.",
        action="store",
        default='.'
    ),
    GcovrConfigOption(
        'search_paths',
        help="Search these directories for coverage files. "
             "Defaults to --root and --object-directory.",
        nargs='*',
    ),
    GcovrConfigOption(
        "fail_under_line",
        "--fail-under-line",
        type=check_percentage,
        metavar="MIN",
        help="Exit with a status of 2 "
             "if the total line coverage is less than MIN. "
             "Can be ORed with exit status of '--fail-under-branch' option.",
        action="store",
        default=0.0
    ),
    GcovrConfigOption(
        "fail_under_branch",
        "--fail-under-branch",
        type=check_percentage,
        metavar="MIN",
        help="Exit with a status of 4 "
             "if the total branch coverage is less than MIN. "
             "Can be ORed with exit status of '--fail-under-line' option.",
        action="store",
        default=0.0
    ),
    GcovrConfigOption(
        'source_encoding',
        '--source-encoding',
        help="Select the source file encoding. "
             "Defaults to the system default encoding ({default!s}).",
        action='store',
        default=getpreferredencoding()
    ),
    GcovrConfigOption(
        "output",
        "-o", "--output",
        group="output_options",
        help="Print output to this filename. Defaults to stdout. "
             "Required for --html-details.",
        action="store",
        default=None
    ),
    GcovrConfigOption(
        "show_branch",
        "-b", "--branches",
        group="output_options",
        help="Report the branch coverage instead of the line coverage. "
             "For text report only.",
        action="store_true",
        default=None
    ),
    GcovrConfigOption(
        "sort_uncovered",
        "-u", "--sort-uncovered",
        group="output_options",
        help="Sort entries by increasing number of uncovered lines. "
             "For text and HTML report.",
        action="store_true",
        default=None
    ),
    GcovrConfigOption(
        "sort_percent",
        "-p", "--sort-percentage",
        group="output_options",
        help="Sort entries by increasing percentage of uncovered lines. "
             "For text and HTML report.",
        action="store_true",
        default=None
    ),
    GcovrConfigOption(
        "xml",
        "-x", "--xml",
        group="output_options",
        help="Generate a Cobertura XML report.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "prettyxml",
        "--xml-pretty",
        group="output_options",
        help="Pretty-print the XML report. Implies --xml. Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "html",
        "--html",
        group="output_options",
        help="Generate a HTML report.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "html_details",
        "--html-details",
        group="output_options",
        help="Add annotated source code reports to the HTML report. "
             "Requires --output as a basename for the reports. "
             "Implies --html.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "html_title",
        "--html-title",
        group="output_options",
        metavar="TITLE",
        help="Use TITLE as title for the HTML report. Default is {default!s}.",
        action="store",
        default="Head"
    ),
    GcovrConfigOption(
        "html_medium_threshold",
        "--html-medium-threshold",
        group="output_options",
        type=check_percentage,
        metavar="MEDIUM",
        help="If the coverage is below MEDIUM, the value is marked "
             "as low coverage in the HTML report. "
             "MEDIUM has to be lower than or equal to value of --html-high-threshold. "
             "If MEDIUM is equal to value of --html-high-threshold the report has "
             "only high and low coverage. Default is {default!s}.",
        action="store",
        default=75.0
    ),
    GcovrConfigOption(
        "html_high_threshold",
        "--html-high-threshold",
        group="output_options",
        type=check_percentage,
        metavar="HIGH",
        help="If the coverage is below HIGH, the value is marked "
             "as medium coverage in the HTML report. "
             "HIGH has to be greater than or equal to value of --html-medium-threshold. "
             "If HIGH is equal to value of --html-medium-threshold the report has "
             "only high and low coverage. Default is {default!s}.",
        action="store",
        default=90.0
    ),
    GcovrConfigOption(
        "relative_anchors",
        "--html-absolute-paths",
        group="output_options",
        help="Use absolute paths to link the --html-details reports. "
             "Defaults to relative links.",
        action="store_false",
        default=True
    ),
    GcovrConfigOption(
        'html_encoding',
        '--html-encoding',
        group="output_options",
        help="Override the declared HTML report encoding. "
             "Defaults to {default!s}. "
             "See also --source-encoding.",
        action='store',
        default='UTF-8'
    ),
    GcovrConfigOption(
        "print_summary",
        "-s", "--print-summary",
        group="output_options",
        help="Print a small report to stdout "
             "with line & branch percentage coverage. "
             "This is in addition to other reports. "
             "Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "filter",
        "-f", "--filter",
        group="filter_options",
        help="Keep only source files that match this filter. "
             "Can be specified multiple times. "
             "If no filters are provided, defaults to --root.",
        action="append",
        default=[]
    ),
    GcovrConfigOption(
        "exclude",
        "-e", "--exclude",
        group="filter_options",
        help="Exclude source files that match this filter. "
             "Can be specified multiple times.",
        action="append",
        type=check_non_empty,
        default=[]
    ),
    GcovrConfigOption(
        "gcov_filter",
        "--gcov-filter",
        group="filter_options",
        help="Keep only gcov data files that match this filter. "
             "Can be specified multiple times.",
        action="append",
        default=[]
    ),
    GcovrConfigOption(
        "gcov_exclude",
        "--gcov-exclude",
        group="filter_options",
        help="Exclude gcov data files that match this filter. "
             "Can be specified multiple times.",
        action="append",
        default=[]
    ),
    GcovrConfigOption(
        "exclude_dirs",
        "--exclude-directories",
        group="filter_options",
        help="Exclude directories that match this regex "
             "while searching raw coverage files. "
             "Can be specified multiple times.",
        action="append",
        type=check_non_empty,
        default=[]
    ),
    GcovrConfigOption(
        "gcov_cmd",
        "--gcov-executable",
        group="gcov_options",
        help="Use a particular gcov executable. "
             "Must match the compiler you are using, "
             "e.g. 'llvm-cov gcov' for Clang. "
             "Can include additional arguments. "
             "Defaults to the GCOV environment variable, "
             "or 'gcov': '{default!s}'.",
        action="store",
        default=os.environ.get('GCOV', 'gcov')
    ),
    GcovrConfigOption(
        "exclude_unreachable_branches",
        "--exclude-unreachable-branches",
        group="gcov_options",
        help="Exclude branch coverage with LCOV/GCOV exclude markers. "
             "Additionally, exclude branch coverage from lines "
             "without useful source code "
             "(often, compiler-generated \"dead\" code). "
             "Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "gcov_files",
        "-g", "--use-gcov-files",
        group="gcov_options",
        help="Use existing gcov files for analysis. Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "gcov_ignore_parse_errors",
        '--gcov-ignore-parse-errors',
        group="gcov_options",
        help="Skip lines with parse errors in GCOV files "
             "instead of exiting with an error. "
             "A report will be shown on stderr. "
             "Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "objdir",
        '--object-directory',
        group="gcov_options",
        help="Override normal working directory detection. "
             "Gcovr needs to identify the path between gcda files "
             "and the directory where the compiler was originally run. "
             "Normally, gcovr can guess correctly. "
             "This option specifies either "
             "the path from gcc to the gcda file (i.e. gcc's '-o' option), "
             "or the path from the gcda file to gcc's working directory.",
        action="store",
        default=None
    ),
    GcovrConfigOption(
        "keep",
        "-k", "--keep",
        group="gcov_options",
        help="Keep gcov files after processing. "
             "This applies both to files that were generated by gcovr, "
             "or were supplied via the --use-gcov-files option. "
             "Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "delete",
        "-d", "--delete",
        group="gcov_options",
        help="Delete gcda files after processing. Default: {default!s}.",
        action="store_true",
        default=False
    ),
    GcovrConfigOption(
        "gcov_parallel",
        "-j",
        group="gcov_options",
        help="Set the number of threads to use in parallel.",
        nargs="?",
        const=cpu_count(),
        type=int,
        default=1
    )
]
